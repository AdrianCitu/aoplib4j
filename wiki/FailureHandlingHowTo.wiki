#summary How to use the @RetryExecution annotation.
#labels Featured,Phase-Implementation

=== Introduction ====
This page is a small tutorial about the {{{@RetryExecution}}} annotation.



=== How to use the {{{@RetryExecution}}} annotation (in 5 minutes) ===
Annotate the method for which you want to handle the execution failure. The annotation have two mandatory parameters ({{{maxRetry}}}), {{{exceptionToCatch}}} and an optional parameter {{{waitTime}}}.  

 * The {{{maxRetry}}} parameter must contains the number of times the annotated method should be re-executed. 
 * The {{{exceptionToCatch}}} should contain the exception class that will trigger the re-execution of the method. 
 * The {{{waitTime}}} represents the time in milliseconds to wait before two consecutive executions.

Code example:

{{{
...
    @RetryExecution(exceptionToCatch = TestingException1.class, maxRetry = 2)
    public void throwException() throws TestingException1, TestingException2  {
...

}}}
   
=== The {{{@RetryExecution}}} annotation: under the hood ===
Under the hood the @AspectJ framework it is used. The pointcut for intercepting the methods annotated with the {{{@RetryExecution}}} is :

{{{
    @Pointcut("execution("
            + "@org.aoplib4j.failurehandling"
            + ".RetryExecution * * (..)) && @annotation(retryAnnotation)")
}}}
The {{{@Around}}} advice it is used.
Here is the complete code of the [http://code.google.com/p/aoplib4j/source/browse/trunk/aoplib4j/src/main/java/com/google/code/aoplib4j/aspectj/failurehandling/internal/RetryExecutionAspect.java RetryExecutionAspect].

=== Critics and enhancements ===
An enhancement would be to add more than one exception to catch.